name: PR Validation

on:
  pull_request:
    branches:
      - prelive
      - live

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Check version is clean (no prerelease identifier)
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [[ "$CURRENT_VERSION" == *"-"* ]]; then
            echo "❌ Error: package.json version '$CURRENT_VERSION' contains a prerelease identifier."
            echo "Please use a clean version number like 1.0.0"
            exit 1
          fi
          echo "✅ Version is clean: $CURRENT_VERSION"

      - name: Check version consistency between package.json and package-lock.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          LOCK_VERSION=$(node -p "require('./package-lock.json').version")

          if [[ "$PACKAGE_VERSION" != "$LOCK_VERSION" ]]; then
            echo "❌ Error: Version mismatch detected!"
            echo "package.json version: $PACKAGE_VERSION"
            echo "package-lock.json version: $LOCK_VERSION"
            echo ""
            echo "Please use 'npm version $PACKAGE_VERSION' to update both files consistently."
            echo "Do not manually edit version numbers in package.json or package-lock.json."
            exit 1
          fi
          echo "✅ Version consistency check passed: $PACKAGE_VERSION"

      - name: Check if version already exists on NPM
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PRELIVE_VERSION="$CURRENT_VERSION-prelive.0"
          TARGET_BRANCH="${{ github.base_ref }}"

          echo "Checking NPM for existing versions..."
          echo "Target branch: $TARGET_BRANCH"
          echo "Clean version: $CURRENT_VERSION"

          # Always check if clean version exists
          if npm view @montonio/montonio-js@$CURRENT_VERSION version 2>/dev/null; then
            echo "❌ Error: Version $CURRENT_VERSION already exists on NPM!"
            echo "Please bump the version number using 'npm version patch' (or 'minor' or 'major')."
            exit 1
          fi

          # Only check prelive version for PRs targeting prelive branch
          if [[ "$TARGET_BRANCH" == "prelive" ]]; then
            echo "Prelive version: $PRELIVE_VERSION"
            if npm view @montonio/montonio-js@$PRELIVE_VERSION version 2>/dev/null; then
              echo "❌ Error: Prelive version $PRELIVE_VERSION already exists on NPM!"
              echo "Please bump the version number using 'npm version patch' (or 'minor' or 'major')."
              exit 1
            fi
            echo "✅ Version availability check passed - neither $CURRENT_VERSION nor $PRELIVE_VERSION exist on NPM"
          else
            echo "✅ Version availability check passed - $CURRENT_VERSION does not exist on NPM"
            echo "ℹ️ Skipping prelive version check for live branch PR (prelive version expected to exist)"
          fi

      - name: Create validation summary
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "## PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Clean version check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Version consistency check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM availability check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Ready for deployment**: ✅ Yes" >> $GITHUB_STEP_SUMMARY
